package amyc
package codegen

import analyzer._
import ast.Identifier
import ast.SymbolicTreeModule.{Call => AmyCall, Div => AmyDiv, And => AmyAnd, Or => AmyOr, _}
import utils.{Context, Pipeline}
import wasm._
import Instructions._
import Utils._

// Generates WebAssembly code for an Amy program
object CodeGen extends Pipeline[(Program, SymbolTable), Module] {
  def run(ctx: Context)(v: (Program, SymbolTable)): Module = {
    val (program, table) = v

    // Generate code for an Amy module
    def cgModule(moduleDef: ModuleDef): List[Function] = {
      val ModuleDef(name, defs, optExpr) = moduleDef
      // Generate code for all functions
      defs.collect { case fd: FunDef if !builtInFunctions(fullName(name, fd.name)) =>
        cgFunction(fd, name, false)
      } ++
      // Generate code for the "main" function, which contains the module expression
      optExpr.toList.map { expr =>
        val mainFd = FunDef(Identifier.fresh("main"), Nil, TypeTree(IntType), expr)
        cgFunction(mainFd, name, true)
      }
    }

    // Generate code for a function in module 'owner'
    def cgFunction(fd: FunDef, owner: Identifier, isMain: Boolean): Function = {
      // Note: We create the wasm function name from a combination of
      // module and function name, since we put everything in the same wasm module.
      val name = fullName(owner, fd.name)
      Function(name, fd.params.size, isMain){ lh =>
        val locals = fd.paramNames.zipWithIndex.toMap
        val body = cgExpr(fd.body)(locals, lh)
        if (isMain) {
          body <:> Drop // Main functions do not return a value,
                        // so we need to drop the value generated by their body
        } else {
          body
        }
      }
    }

    // Generate code for an expression expr.
    // Additional arguments are a mapping from identifiers (parameters and variables) to
    // their index in the wasm local variables, and a LocalsHandler which will generate
    // fresh local slots as required.
    def cgExpr(expr: Expr)(implicit locals: Map[Identifier, Int], lh: LocalsHandler): Code = expr match {
      case Variable(name) => GetLocal(locals.get(name).get)
      case IntLiteral(value) => Const(value)
      case BooleanLiteral(value) => if(value) Const(1) else Const(0)
      case StringLiteral(value) => mkString(value)
      case UnitLiteral() => Const(0)
      case Plus(l, r) => cgExpr(l) <:> cgExpr(r) <:> Add
      case Minus(l, r) => cgExpr(l) <:> cgExpr(r) <:> Sub
      case Times(l, r) => cgExpr(l) <:> cgExpr(r) <:> Mul
      case Div(l, r) => cgExpr(l) <:> cgExpr(r) <:> Div
      case Mod(l, r) => cgExpr(l) <:> cgExpr(r) <:> Rem
      case LessThan(l, r) => cgExpr(l) <:> cgExpr(r) <:> Lt_s
      case LessEquals(l, r) => cgExpr(l) <:> cgExpr(r) <:> Le_s
      case And(l, r) => cgExpr(l) <:> cgExpr(r) <:> And
      case Or(l, r) => cgExpr(l) <:> cgExpr(r) <:> Or
      case Equals(l, r) => cgExpr(l) <:> cgExpr(r) <:> Eqz
      case Concat(l, r) => ???
      case Not(e) => cgExpr(e) <:> If_i32 <:> Const(0) <:> Else <:> Const(1) <:> End
      case Neg(e) => Const(0) <:> cgExpr(e) <:> Sub
      case Call(qname, args) => ???
      case Sequence(e1, e2) => cgExpr(e1) <:> cgExpr(e2)
      case Let(df, value, body) =>
        val local = lh.getFreshLocal()
        val id = df.name
        cgExpr(value) <:> SetLocal(local) <:> cgExpr(body)(locals ++ Map(id -> local), lh)
      case Ite(cond, thenn, elze) => ???
      case Match(scrut, cases) => ???
      case Error(msg) => ???
    }

    Module(
      program.modules.last.name.name,
      defaultImports,
      globalsNo,
      wasmFunctions ++ (program.modules flatMap cgModule)
    )

  }
}
